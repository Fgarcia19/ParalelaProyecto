#include <bits/stdc++.h>
#include <omp.h>
using namespace std;
const int N = 25;

int final_path[N+1];
bool v[N];
double final_res = DBL_MAX;


double Minimo(double adj[N][N], int i)
{
	double min = DBL_MAX;
	for (int k=0; k<N; k++)
		if (adj[i][k]<min && i != k)
			min = adj[i][k];
	return min;
}

double SegundoMinimo(double adj[N][N], int i)
{
	double first = DBL_MAX, second = DBL_MAX;
	for (int j=0; j<N; j++)
	{
		if (i == j)
			continue;
		if (adj[i][j] <= first)
		{
			second = first;
			first = adj[i][j];
		}
		else if (adj[i][j] <= second &&
				adj[i][j] != first)
			second = adj[i][j];
	}
	return second;
}

void TSPRec(double adj[N][N], double curr_bound, double curr_weight,
			int level, int curr_path[],bool visited[])
{

	if (level==N)
	{
        /*
			ser accedida por un proceso a la vez
			critial section
		*/

			if (adj[curr_path[level-1]][curr_path[0]] != 0)
			{
				double curr_res = curr_weight +
						adj[curr_path[level-1]][curr_path[0]];
				#pragma omp critical
				{
					if (curr_res < final_res)
					{
						for (int i=0; i<N; i++)
							final_path[i] = curr_path[i];
						final_path[N] = curr_path[0];
						final_res = curr_res;
					}
				}
			}
	}
	else{

	for (int i=0; i<N; i++)
	{
		if (adj[curr_path[level-1]][i] != 0 &&
			visited[i] == false)
		{

			double temp = curr_bound;
			curr_weight += adj[curr_path[level-1]][i];

			curr_bound -= ((SegundoMinimo(adj, curr_path[level-1]) +
							Minimo(adj, i))/2);
	//cout<<curr_bound<<" "<<curr_weight<<" < "<<final_res <<endl;

			if (curr_bound + curr_weight < final_res)
			{

				curr_path[level] = i;
				visited[i] = true;

				TSPRec(adj, curr_bound, curr_weight, level+1,
					curr_path,visited);
			}

			curr_weight -= adj[curr_path[level-1]][i];
			curr_bound = temp;

			memset(visited, false, sizeof(v));
			for (int j=0; j<=level-1; j++)
				visited[curr_path[j]] = true;
		}
	}
	}

}

void TSP(double adj[N][N], int threads)
{


	#pragma omp parallel for num_threads(threads)
	for(int i=1; i<N;i++)
	{

	int curr_path[N+1];
	bool visited[N];


	double curr_bound = 0;
	memset(curr_path, -1, sizeof(curr_path));
	memset(visited, 0, sizeof(curr_path));

	for (int i=0; i<N; i++)
		curr_bound += (Minimo(adj, i) + SegundoMinimo(adj, i));

	curr_bound = curr_bound/2;
	visited[0] = true;
	
	
	curr_path[0] = 0;
			double temp = curr_bound;
						curr_bound -= ((Minimo(adj, curr_path[0]) +
							Minimo(adj, i))/2);
		visited[i]=true;
		curr_path[1] = i;
		TSPRec(adj,curr_bound,adj[0][i],2,curr_path,visited);
			curr_bound = temp;
		visited[i]=false;


	}
	/*
		#pragma dsa,das
			for i < n
				visit[i]=true
				curr_path[1]=i
				TSPRec(adj, curr_bound, arista_costo(0,i), 2, curr_path);
	*/
}

int main()
{
	string distritos[N] = {"Lima Centro", "Lince", "Miraflores", "Barranco", "Rimac", "Los Olivos", "La Molina", "La Victoria", "Magdalena", "San Borja"};
	
	double adj[N][N] = { 
    {0, 1.6, 0.8, 1.0, 1.6, 1.3, 1.0, 1.4, 2.0, 0.6, 1.2, 1.6, 0.7, 1.9, 1.6, 0.6, 1.9, 1.6, 1.6, 0.5, 0.7, 1.3, 0.8, 1.5, 1.5},
    {1.6, 0, 1.1, 0.6, 1.2, 2.0, 0.5, 1.9, 1.8, 1.1, 0.7, 0.8, 0.7, 1.7, 1.3, 0.6, 1.8, 0.9, 1.1, 0.9, 0.8, 1.0, 0.9, 0.6, 0.6},
    {0.8, 1.1, 0, 2.0, 1.1, 1.8, 1.8, 0.5, 0.8, 1.9, 1.7, 1.0, 0.7, 0.7, 1.6, 2.0, 0.7, 1.4, 1.4, 0.8, 1.3, 1.3, 1.7, 1.0, 1.7},
    {1.0, 0.6, 2.0, 0, 0.5, 0.8, 1.5, 1.0, 1.1, 1.5, 1.2, 0.5, 0.9, 1.3, 1.7, 1.9, 0.5, 1.9, 1.5, 1.0, 0.9, 0.9, 1.2, 1.3, 1.3},
    {1.6, 1.2, 1.1, 0.5, 0, 0.6, 0.8, 1.9, 1.2, 1.0, 1.2, 1.7, 1.5, 1.0, 1.9, 0.9, 1.2, 1.9, 2.0, 1.3, 1.6, 1.7, 0.9, 1.8, 1.0},
    {1.3, 2.0, 1.8, 0.8, 0.6, 0, 1.5, 0.7, 1.6, 1.6, 1.6, 1.3, 0.7, 1.2, 0.9, 1.0, 1.8, 0.9, 1.7, 1.0, 1.3, 1.5, 1.6, 1.3, 1.8},
    {1.0, 0.5, 1.8, 1.5, 0.8, 1.5, 0, 1.0, 1.3, 1.9, 0.7, 1.1, 0.5, 1.9, 1.0, 0.8, 1.6, 0.8, 0.7, 1.3, 1.2, 1.9, 0.9, 1.8, 1.5},
    {1.4, 1.9, 0.5, 1.0, 1.9, 0.7, 1.0, 0, 1.9, 1.6, 0.5, 0.8, 1.8, 0.6, 0.9, 0.7, 0.7, 0.9, 1.9, 1.7, 0.8, 1.8, 0.7, 0.6, 1.8},
    {2.0, 1.8, 0.8, 1.1, 1.2, 1.6, 1.3, 1.9, 0, 0.9, 0.7, 1.2, 1.3, 1.1, 0.6, 1.3, 0.5, 1.4, 1.1, 0.8, 1.3, 1.9, 1.7, 1.5, 1.7},
    {0.6, 1.1, 1.9, 1.5, 1.0, 1.6, 1.9, 1.6, 0.9, 0, 1.0, 1.6, 1.9, 1.6, 1.5, 0.5, 0.5, 2.0, 1.3, 1.0, 1.6, 0.9, 0.9, 2.0, 2.0},
    {1.2, 0.7, 1.7, 1.2, 1.2, 1.6, 0.7, 0.5, 0.7, 1.0, 0, 1.2, 1.6, 1.2, 2.0, 1.5, 1.3, 0.7, 0.6, 1.8, 1.3, 1.1, 1.8, 1.2, 1.8},
    {1.6, 0.8, 1.0, 0.5, 1.7, 1.3, 1.1, 0.8, 1.2, 1.6, 1.2, 0, 1.7, 0.7, 1.9, 1.9, 1.4, 0.8, 1.7, 1.7, 1.9, 0.5, 0.8, 1.7, 1.7},
    {0.7, 0.7, 0.7, 0.9, 1.5, 0.7, 0.5, 1.8, 1.3, 1.9, 1.6, 1.7, 0, 1.9, 1.7, 0.9, 0.7, 1.7, 0.6, 0.8, 0.8, 1.3, 1.5, 1.9, 0.8},
    {1.9, 1.7, 0.7, 1.3, 1.0, 1.2, 1.9, 0.6, 1.1, 1.6, 1.2, 0.7, 1.9, 0, 1.7, 1.2, 1.4, 0.7, 1.6, 1.5, 0.6, 1.8, 1.6, 1.3, 0.9},
    {1.6, 1.3, 1.6, 1.7, 1.9, 0.9, 1.0, 0.9, 0.6, 1.5, 2.0, 1.9, 1.7, 1.7, 0, 1.4, 1.4, 1.3, 1.4, 1.9, 1.6, 1.4, 0.6, 1.5, 0.6},
    {0.6, 0.6, 2.0, 1.9, 0.9, 1.0, 0.8, 0.7, 1.3, 0.5, 1.5, 1.9, 0.9, 1.2, 1.4, 0, 1.3, 1.6, 1.8, 1.7, 1.1, 1.5, 2.0, 1.2, 2.0},
    {1.9, 1.8, 0.7, 0.5, 1.2, 1.8, 1.6, 0.7, 0.5, 0.5, 1.3, 1.4, 0.7, 1.4, 1.4, 1.3, 0, 1.0, 1.1, 1.5, 1.2, 1.4, 1.7, 1.5, 1.7},
    {1.6, 0.9, 1.4, 1.9, 1.9, 0.9, 0.8, 0.9, 1.4, 2.0, 0.7, 0.8, 1.7, 0.7, 1.3, 1.6, 1.0, 0, 2.0, 1.6, 1.6, 1.9, 0.8, 1.2, 1.6},
    {1.6, 1.1, 1.4, 1.5, 2.0, 1.7, 0.7, 1.9, 1.1, 1.3, 0.6, 1.7, 0.6, 1.6, 1.4, 1.8, 1.1, 2.0, 0, 1.6, 1.4, 0.8, 1.1, 1.7, 1.2},
    {0.5, 0.9, 0.8, 1.0, 1.3, 1.0, 1.3, 1.7, 0.8, 1.0, 1.8, 1.7, 0.8, 1.5, 1.9, 1.7, 1.5, 1.6, 1.6, 0, 2.0, 1.7, 0.8, 1.3, 1.7},
    {0.7, 0.8, 1.3, 0.9, 1.6, 1.3, 1.2, 0.8, 1.3, 1.6, 1.3, 1.9, 0.8, 0.6, 1.6, 1.1, 1.2, 1.6, 1.4, 2.0, 0, 1.5, 0.5, 1.2, 0.6},
    {1.3, 1.0, 1.3, 0.9, 1.7, 1.5, 1.9, 1.8, 1.9, 0.9, 1.1, 0.5, 1.3, 1.8, 1.4, 1.5, 1.4, 1.9, 0.8, 1.7, 1.5, 0, 1.1, 1.6, 1.1},
    {0.8, 0.9, 1.7, 1.2, 0.9, 1.6, 0.9, 0.7, 1.7, 0.9, 1.8, 0.8, 1.5, 1.6, 0.6, 2.0, 1.7, 0.8, 1.1, 0.8, 0.5, 1.1, 0, 2.0, 1.3},
    {1.5, 0.6, 1.0, 1.3, 1.8, 1.3, 1.8, 0.6, 1.5, 2.0, 1.2, 1.7, 1.9, 1.3, 1.5, 1.2, 1.5, 1.2, 1.7, 1.3, 1.2, 1.6, 2.0, 0, 1.4},
    {1.5, 0.6, 1.7, 1.3, 1.0, 1.8, 1.5, 1.8, 1.7, 2.0, 1.8, 1.7, 0.8, 0.9, 0.6, 2.0, 1.7, 1.6, 1.2, 1.7, 0.6, 1.1, 1.3, 1.4, 0}
};

	double wtime1, wtime2;

	wtime1 = omp_get_wtime();
	TSP(adj,16);
	wtime2 = omp_get_wtime();
/*
	printf("Execution time: %f\n", wtime2-wtime1);
	printf("Minimum cost : %f\n", final_res);
	printf("Path Taken :");
	for (int i=0; i<=N; i++)
		if(i!=N){
			printf(" %s ->", distritos[final_path[i]].c_str());
		}
		else{
			printf(" %s", distritos[final_path[i]].c_str());
		}
*/
	printf("%f + ", wtime2-wtime1);
	return 0;
}

/*

Matriz original con distancias de los 10 distritos de los enunciados:

    {0,  4.9,  7,  10, 3.6,  13, 13, 3,  6,  7},  
    {4.9,  0,  3,  6,  7,  16, 14, 2,  4,  5},  
    {7,  3,  0,  3,  10, 20, 13, 5,  5,  5},  
    {10, 6,  3,  0,  14, 23, 14, 8,  8,  7},  
    {3.6,  7,  10, 14, 0,  11, 15, 6,  9,  10}, 
    {13, 16, 20, 23, 11, 0,  26, 16, 16, 20}, 
    {13, 14, 13, 14, 15, 26, 0,  13, 17, 8},  
    {3,  2,  5,  8,  6,  16, 12, 0,  6,  4},  
    {6,  4,  5,  8,  9,  16, 17, 6,  0,  9},  
    {7,  5,  5,  7,  10, 20, 8,  4,  9,  0}  

	Matriz de 15x15:

    {0, 1.0, 0.7, 1.5, 0.7, 1.7, 1.3, 1.7, 1.3, 1.5, 1.1, 1.7, 1.3, 1.0, 1.2},
    {1.0, 0, 0.6, 1.6, 1.6, 1.6, 0.9, 1.5, 0.7, 0.8, 1.4, 1.8, 1.5, 1.8, 1.6},
    {0.7, 0.6, 0, 1.6, 1.4, 0.7, 0.8, 1.8, 1.5, 1.0, 0.5, 1.2, 1.8, 0.9, 1.2},
    {1.5, 1.6, 1.6, 0, 0.6, 1.5, 1.6, 1.3, 1.0, 1.5, 1.5, 1.1, 0.6, 1.4, 0.6},
    {0.7, 1.6, 1.4, 0.6, 0, 1.6, 1.7, 1.8, 1.7, 1.2, 1.3, 1.8, 1.8, 1.8, 1.4},
    {1.7, 1.6, 0.7, 1.5, 1.6, 0, 0.5, 1.2, 1.8, 1.5, 0.6, 1.8, 0.5, 1.8, 2.0},
    {1.3, 0.9, 0.8, 1.6, 1.7, 0.5, 0, 1.0, 0.5, 2.0, 1.0, 1.6, 0.5, 1.0, 0.7},
    {1.7, 1.5, 1.8, 1.3, 1.8, 1.2, 1.0, 0, 1.5, 1.1, 1.5, 2.0, 0.6, 2.0, 1.2},
    {1.3, 0.7, 1.5, 1.0, 1.7, 1.8, 0.5, 1.5, 0, 0.9, 1.5, 1.0, 1.9, 0.7, 1.1},
    {1.5, 0.8, 1.0, 1.5, 1.2, 1.5, 2.0, 1.1, 0.9, 0, 1.1, 1.4, 0.5, 0.9, 0.6},
    {1.1, 1.4, 0.5, 1.5, 1.3, 0.6, 1.0, 1.5, 1.5, 1.1, 0, 1.6, 0.5, 1.6, 1.9},
    {1.7, 1.8, 1.2, 1.1, 1.8, 1.8, 1.6, 2.0, 1.0, 1.4, 1.6, 0, 2.0, 1.9, 0.5},
    {1.3, 1.5, 1.8, 0.6, 1.8, 0.5, 0.5, 0.6, 1.9, 0.5, 0.5, 2.0, 0, 1.1, 2.0},
    {1.0, 1.8, 0.9, 1.4, 1.8, 1.8, 1.0, 2.0, 0.7, 0.9, 1.6, 1.9, 1.1, 0, 1.0},
    {1.2, 1.6, 1.2, 0.6, 1.4, 2.0, 0.7, 1.2, 1.1, 0.6, 1.9, 0.5, 2.0, 1.0, 0}

	Matriz de 20x20:

    {0, 0.7, 1.2, 1.6, 1.5, 1.4, 1.4, 1.3, 0.6, 0.9, 1.9, 0.5, 1.3, 0.8, 0.6, 1.9, 1.8, 1.9, 0.9, 2.0},
    {0.7, 0, 1.9, 1.5, 1.3, 1.2, 0.5, 0.6, 1.8, 0.5, 1.9, 1.0, 1.4, 0.7, 1.9, 1.1, 0.9, 0.9, 1.3, 2.0},
    {1.2, 1.9, 0, 1.2, 0.8, 1.0, 1.1, 0.8, 1.5, 1.3, 1.9, 2.0, 1.6, 0.5, 1.7, 1.0, 1.0, 1.9, 0.8, 0.6},
    {1.6, 1.5, 1.2, 0, 1.0, 1.3, 0.9, 2.0, 0.5, 0.7, 1.3, 1.3, 1.3, 1.2, 2.0, 0.9, 1.8, 0.7, 1.7, 1.6},
    {1.5, 1.3, 0.8, 1.0, 0, 1.6, 1.6, 1.6, 1.2, 2.0, 1.2, 1.7, 1.7, 1.8, 0.9, 0.7, 1.7, 1.4, 1.3, 0.6},
    {1.4, 1.2, 1.0, 1.3, 1.6, 0, 0.5, 1.9, 0.7, 1.1, 1.8, 0.6, 1.9, 1.1, 1.5, 0.7, 0.5, 0.9, 1.8, 0.5},
    {1.4, 0.5, 1.1, 0.9, 1.6, 0.5, 0, 1.3, 1.6, 0.5, 0.5, 1.4, 1.3, 1.6, 1.3, 2.0, 0.8, 2.0, 1.9, 0.7},
    {1.3, 0.6, 0.8, 2.0, 1.6, 1.9, 1.3, 0, 1.2, 1.9, 1.8, 0.8, 1.6, 1.6, 1.5, 1.2, 1.3, 1.8, 1.5, 1.1},
    {0.6, 1.8, 1.5, 0.5, 1.2, 0.7, 1.6, 1.2, 0, 1.1, 1.0, 1.0, 0.9, 2.0, 0.8, 1.4, 1.5, 1.0, 1.7, 0.8},
    {0.9, 0.5, 1.3, 0.7, 2.0, 1.1, 0.5, 1.9, 1.1, 0, 2.0, 2.0, 0.7, 0.7, 1.8, 0.6, 1.1, 0.8, 1.4, 1.8},
    {1.9, 1.9, 1.9, 1.3, 1.2, 1.8, 0.5, 1.8, 1.0, 2.0, 0, 1.2, 2.0, 1.2, 1.3, 2.0, 1.2, 0.6, 1.8, 0.5},
    {0.5, 1.0, 2.0, 1.3, 1.7, 0.6, 1.4, 0.8, 1.0, 2.0, 1.2, 0, 0.8, 1.4, 0.9, 1.3, 1.2, 1.1, 1.3, 1.1},
    {1.3, 1.4, 1.6, 1.3, 1.7, 1.9, 1.3, 1.6, 0.9, 0.7, 2.0, 0.8, 0, 1.2, 1.0, 0.6, 1.8, 1.1, 1.4, 0.8},
    {0.8, 0.7, 0.5, 1.2, 1.8, 1.1, 1.6, 1.6, 2.0, 0.7, 1.2, 1.4, 1.2, 0, 1.6, 2.0, 1.8, 0.6, 0.8, 0.7},
    {0.6, 1.9, 1.7, 2.0, 0.9, 1.5, 1.3, 1.5, 0.8, 1.8, 1.3, 0.9, 1.0, 1.6, 0, 2.0, 0.7, 1.1, 1.9, 1.5},
    {1.9, 1.1, 1.0, 0.9, 0.7, 0.7, 2.0, 1.2, 1.4, 0.6, 2.0, 1.3, 0.6, 2.0, 2.0, 0, 0.9, 1.5, 1.5, 1.1},
    {1.8, 0.9, 1.0, 1.8, 1.7, 0.5, 0.8, 1.3, 1.5, 1.1, 1.2, 1.2, 1.8, 1.8, 0.7, 0.9, 0, 0.5, 1.2, 1.4},
    {1.9, 0.9, 1.9, 0.7, 1.4, 0.9, 2.0, 1.8, 1.0, 0.8, 0.6, 1.1, 1.1, 0.6, 1.1, 1.5, 0.5, 0, 1.7, 0.8},
    {0.9, 1.3, 0.8, 1.7, 1.3, 1.8, 1.9, 1.5, 1.7, 1.4, 1.8, 1.3, 1.4, 0.8, 1.9, 1.5, 1.2, 1.7, 0, 1.8},
    {2.0, 2.0, 0.6, 1.6, 0.6, 0.5, 0.7, 1.1, 0.8, 1.8, 0.5, 1.1, 0.8, 0.7, 1.5, 1.1, 1.4, 0.8, 1.8, 0}

	Matriz de 25x25

	    {0, 1.6, 0.8, 1.0, 1.6, 1.3, 1.0, 1.4, 2.0, 0.6, 1.2, 1.6, 0.7, 1.9, 1.6, 0.6, 1.9, 1.6, 1.6, 0.5, 0.7, 1.3, 0.8, 1.5, 1.5},
    {1.6, 0, 1.1, 0.6, 1.2, 2.0, 0.5, 1.9, 1.8, 1.1, 0.7, 0.8, 0.7, 1.7, 1.3, 0.6, 1.8, 0.9, 1.1, 0.9, 0.8, 1.0, 0.9, 0.6, 0.6},
    {0.8, 1.1, 0, 2.0, 1.1, 1.8, 1.8, 0.5, 0.8, 1.9, 1.7, 1.0, 0.7, 0.7, 1.6, 2.0, 0.7, 1.4, 1.4, 0.8, 1.3, 1.3, 1.7, 1.0, 1.7},
    {1.0, 0.6, 2.0, 0, 0.5, 0.8, 1.5, 1.0, 1.1, 1.5, 1.2, 0.5, 0.9, 1.3, 1.7, 1.9, 0.5, 1.9, 1.5, 1.0, 0.9, 0.9, 1.2, 1.3, 1.3},
    {1.6, 1.2, 1.1, 0.5, 0, 0.6, 0.8, 1.9, 1.2, 1.0, 1.2, 1.7, 1.5, 1.0, 1.9, 0.9, 1.2, 1.9, 2.0, 1.3, 1.6, 1.7, 0.9, 1.8, 1.0},
    {1.3, 2.0, 1.8, 0.8, 0.6, 0, 1.5, 0.7, 1.6, 1.6, 1.6, 1.3, 0.7, 1.2, 0.9, 1.0, 1.8, 0.9, 1.7, 1.0, 1.3, 1.5, 1.6, 1.3, 1.8},
    {1.0, 0.5, 1.8, 1.5, 0.8, 1.5, 0, 1.0, 1.3, 1.9, 0.7, 1.1, 0.5, 1.9, 1.0, 0.8, 1.6, 0.8, 0.7, 1.3, 1.2, 1.9, 0.9, 1.8, 1.5},
    {1.4, 1.9, 0.5, 1.0, 1.9, 0.7, 1.0, 0, 1.9, 1.6, 0.5, 0.8, 1.8, 0.6, 0.9, 0.7, 0.7, 0.9, 1.9, 1.7, 0.8, 1.8, 0.7, 0.6, 1.8},
    {2.0, 1.8, 0.8, 1.1, 1.2, 1.6, 1.3, 1.9, 0, 0.9, 0.7, 1.2, 1.3, 1.1, 0.6, 1.3, 0.5, 1.4, 1.1, 0.8, 1.3, 1.9, 1.7, 1.5, 1.7},
    {0.6, 1.1, 1.9, 1.5, 1.0, 1.6, 1.9, 1.6, 0.9, 0, 1.0, 1.6, 1.9, 1.6, 1.5, 0.5, 0.5, 2.0, 1.3, 1.0, 1.6, 0.9, 0.9, 2.0, 2.0},
    {1.2, 0.7, 1.7, 1.2, 1.2, 1.6, 0.7, 0.5, 0.7, 1.0, 0, 1.2, 1.6, 1.2, 2.0, 1.5, 1.3, 0.7, 0.6, 1.8, 1.3, 1.1, 1.8, 1.2, 1.8},
    {1.6, 0.8, 1.0, 0.5, 1.7, 1.3, 1.1, 0.8, 1.2, 1.6, 1.2, 0, 1.7, 0.7, 1.9, 1.9, 1.4, 0.8, 1.7, 1.7, 1.9, 0.5, 0.8, 1.7, 1.7},
    {0.7, 0.7, 0.7, 0.9, 1.5, 0.7, 0.5, 1.8, 1.3, 1.9, 1.6, 1.7, 0, 1.9, 1.7, 0.9, 0.7, 1.7, 0.6, 0.8, 0.8, 1.3, 1.5, 1.9, 0.8},
    {1.9, 1.7, 0.7, 1.3, 1.0, 1.2, 1.9, 0.6, 1.1, 1.6, 1.2, 0.7, 1.9, 0, 1.7, 1.2, 1.4, 0.7, 1.6, 1.5, 0.6, 1.8, 1.6, 1.3, 0.9},
    {1.6, 1.3, 1.6, 1.7, 1.9, 0.9, 1.0, 0.9, 0.6, 1.5, 2.0, 1.9, 1.7, 1.7, 0, 1.4, 1.4, 1.3, 1.4, 1.9, 1.6, 1.4, 0.6, 1.5, 0.6},
    {0.6, 0.6, 2.0, 1.9, 0.9, 1.0, 0.8, 0.7, 1.3, 0.5, 1.5, 1.9, 0.9, 1.2, 1.4, 0, 1.3, 1.6, 1.8, 1.7, 1.1, 1.5, 2.0, 1.2, 2.0},
    {1.9, 1.8, 0.7, 0.5, 1.2, 1.8, 1.6, 0.7, 0.5, 0.5, 1.3, 1.4, 0.7, 1.4, 1.4, 1.3, 0, 1.0, 1.1, 1.5, 1.2, 1.4, 1.7, 1.5, 1.7},
    {1.6, 0.9, 1.4, 1.9, 1.9, 0.9, 0.8, 0.9, 1.4, 2.0, 0.7, 0.8, 1.7, 0.7, 1.3, 1.6, 1.0, 0, 2.0, 1.6, 1.6, 1.9, 0.8, 1.2, 1.6},
    {1.6, 1.1, 1.4, 1.5, 2.0, 1.7, 0.7, 1.9, 1.1, 1.3, 0.6, 1.7, 0.6, 1.6, 1.4, 1.8, 1.1, 2.0, 0, 1.6, 1.4, 0.8, 1.1, 1.7, 1.2},
    {0.5, 0.9, 0.8, 1.0, 1.3, 1.0, 1.3, 1.7, 0.8, 1.0, 1.8, 1.7, 0.8, 1.5, 1.9, 1.7, 1.5, 1.6, 1.6, 0, 2.0, 1.7, 0.8, 1.3, 1.7},
    {0.7, 0.8, 1.3, 0.9, 1.6, 1.3, 1.2, 0.8, 1.3, 1.6, 1.3, 1.9, 0.8, 0.6, 1.6, 1.1, 1.2, 1.6, 1.4, 2.0, 0, 1.5, 0.5, 1.2, 0.6},
    {1.3, 1.0, 1.3, 0.9, 1.7, 1.5, 1.9, 1.8, 1.9, 0.9, 1.1, 0.5, 1.3, 1.8, 1.4, 1.5, 1.4, 1.9, 0.8, 1.7, 1.5, 0, 1.1, 1.6, 1.1},
    {0.8, 0.9, 1.7, 1.2, 0.9, 1.6, 0.9, 0.7, 1.7, 0.9, 1.8, 0.8, 1.5, 1.6, 0.6, 2.0, 1.7, 0.8, 1.1, 0.8, 0.5, 1.1, 0, 2.0, 1.3},
    {1.5, 0.6, 1.0, 1.3, 1.8, 1.3, 1.8, 0.6, 1.5, 2.0, 1.2, 1.7, 1.9, 1.3, 1.5, 1.2, 1.5, 1.2, 1.7, 1.3, 1.2, 1.6, 2.0, 0, 1.4},
    {1.5, 0.6, 1.7, 1.3, 1.0, 1.8, 1.5, 1.8, 1.7, 2.0, 1.8, 1.7, 0.8, 0.9, 0.6, 2.0, 1.7, 1.6, 1.2, 1.7, 0.6, 1.1, 1.3, 1.4, 0}
*/
